<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation=" 
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd" default-autowire="byName">
	<!-- default-autowire="byName"，约定优于配置，约定优于配置 -->
	
	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
	<mvc:resources mapping="/assets/**" location="/assets/"/>
	<mvc:resources mapping="/bootstrap/**" location="/bootstrap/"/>
	<mvc:resources mapping="/images/**" location="/images/"/>
	<mvc:resources mapping="/plugins/**" location="/plugins/"/>
	<mvc:resources mapping="/js/**" location="/js/"/>
	<mvc:resources mapping="/*.html" location="/"/>

	<!-- 
	①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 
	-->
	<!-- 自动扫描且只扫描@Controller -->
	<!-- 加入定制化包实体路径com.sample -->
	<context:component-scan base-package="com.zy.dmop" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 系统日志跟踪功能 -->
	<!--bean id="log4JDBCImpl" class="com.ketayao.ketacustom.log.impl.Log4JDBCImpl" >
		<property name="logInfoService" ref="logInfoServiceImpl"/>
		<property name="rootLogLevel" value="ERROR"/>
		<property name="customLogLevel">
           <map>
              <entry key="com.ketayao.ketacustom" value="TRACE" />
			  <entry key="com.gd.ivt.spring.web.controller" value="TRACE" />
           </map>
       </property>
	</bean-->
	
	<!-- 日志拦截记录
	<mvc:interceptors>
		
		<mvc:interceptor>
			<mvc:mapping path="/car/**" />
			<mvc:mapping path="/monitor_config/**" />
			<mvc:mapping path="/driver/**" />
			<mvc:mapping path="/company/**" />
			<mvc:mapping path="/department/**" />
			<mvc:mapping path="/car_group/**" />
			<mvc:mapping path="/management/**" />
			<mvc:mapping path="/car_faultCode/**" />
			<mvc:mapping path="/login/timeout/success"/>
			
			<bean class="com.ketayao.ketacustom.log.spring.LogInterceptor" >
				<property name="logAPI" ref="log4JDBCImpl"/>
			</bean>
		</mvc:interceptor>	
	</mvc:interceptors>
	 -->
	
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>	
	</mvc:annotation-driven>
	
	<bean id="multipartResolver"  
	    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding">  
	        <value>UTF-8</value>  
	    </property>  
	    <property name="maxUploadSize">  
	        <value>1048576</value><!-- 上传文件大小限制为1M，1*1024*1024 -->  
	    </property>  
	    <property name="maxInMemorySize">  
	        <value>4096</value>  
	    </property>  
	</bean>		
	
	<mvc:default-servlet-handler/>
	
	<!-- 
	②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，添加拦截器，类级别的处理器映射 
	-->
	<!--bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <list>
                <bean class="com.gd.ivt.spring.web.util.AuthHandlerInterceptor"/>
            </list>
        </property>
	</bean-->
	
	<!-- 
	②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，
	配置一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射
	-->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="cacheSeconds" value="0" />
	    
	    <!-- property name="webBindingInitializer">
	        <bean class="com.fsj.spring.util.MyWebBinding" />
	    </property -->
	    
	    <!-- 配置一下对json数据的转换 -->
	    <property name="messageConverters">
	    	<list>
	    		<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	    	</list>
	    </property>
	</bean>
	
	<!-- 
	③：对模型视图名称的解析，即在模型视图名称添加前后缀
	InternalResourceViewResolver默认的就是JstlView所以这里就不用配置viewClass了 
	-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/index"/>
	
	<!-- 开启shiro的注解支持 -->
	<aop:config proxy-target-class="true"></aop:config>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	<property name="securityManager" ref="securityManager"/>
	</bean>
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!--登录-->
                <prop key="org.apache.shiro.authz.UnauthenticatedException">
                    redirect:/login
                </prop>
                <!--授权-->
                <prop key="org.apache.shiro.authz.UnauthorizedException">
                    redirect:/pageJump/toPermissionWarn
                </prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error/genericView"/>
    </bean>
	
	
</beans> 